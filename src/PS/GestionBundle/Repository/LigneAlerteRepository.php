<?php

namespace PS\GestionBundle\Repository;

use PS\GestionBundle\Entity\LigneAlerte;

/**
 * LigneAlerteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LigneAlerteRepository extends \Doctrine\ORM\EntityRepository
{

    public function countByPatient($alerte, $patient)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('COUNT(l.id)')
            ->from(LigneAlerte::class, 'l')
            ->join('l.alerte', 'a')
            ->where("a.patient = :patient")
            ->andWhere('l.alerte = :alerte')
            ->setParameter('alerte', $alerte)
            ->setParameter('patient', $patient);
        return $qb->getQuery()->getSingleScalarResult();
    }



    public function findAllPatient($patient, $alerte, $startDate, $endDate)
    {
        $alerte = $alerte->getId();
        $patient = $patient->getId();
        $stmt = $this->getEntityManager()->getConnection();
        $parameters = compact('patient', 'alerte');
        $sql           = <<<SQL
        SELECT 
            DATE(`date_debut`) AS start,
            CONCAT(DATE_FORMAT(date_debut, '%H:%i'), ' - ', l.libelle) AS title,
            a.libelle as _alerte,
            l.commentaire,
            l.id
            FROM ligne_alerte l
            JOIN alerte a
        WHERE a.patient_id = :patient
        AND alerte_id = :alerte
SQL;

        $startDate  = $this->convertDate($startDate);
        $endDate    = $this->convertDate($endDate);

        if ($startDate) {
            if (!$endDate || ($startDate == $endDate)) {
               $sql .= ' AND DATE(`date_debut`) = :startDate';
                $parameters['startDate'] = $startDate;
            } else {
                $sql .= ' AND DATE(`date_debut`) >= :startDate AND DATE(`date_debut`) <= :endDate';
                $parameters['startDate'] = $startDate;
                $parameters['endDate']   = $endDate;
            }
        }


        $query = $stmt->prepare($sql);
        $query->execute($parameters);
        return $query->fetchAll(\PDO::FETCH_ASSOC);
    }


     /**
     * @param $date
     */
    private function convertDate($date)
    {
        if ($date) {
            return (new \DateTime($date))->format('Y-m-d');
        }
    }
}
