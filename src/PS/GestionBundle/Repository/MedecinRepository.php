<?php

namespace PS\GestionBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * MedecinRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MedecinRepository extends EntityRepository
{
    public function findPersoByParam($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('m')
            ->from('GestionBundle:Medecin', 'm')
            ->where("m.personne = :id")
            ->setParameter('id', $id);

        return $qb->getQuery()->getResult();

    }


    /*public function find($id)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('m', 'p2')
            ->from('GestionBundle:Medecin', 'm')
            ->leftJoin("p.personne", "p2")
            ->where('m.id = :id')
            ->setParameter('id', $id);

        return $qb->getQuery()->getResult();

    }*/


    public function findIdByPersonne($personne)
    {
        if (is_object($personne)) {
            $id = $personne->getId();
        } else {
            $id = $personne;
        }

        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('m.id')
            ->from('GestionBundle:Medecin', 'm')
            ->where("m.personne = :personne")
            ->setParameter('personne', $id);

        return $qb->getQuery()->getSingleScalarResult();
    }


    public function findByUser($user)
    {
        return $this->findPersoByParam($user->getPersonne()->getId());
    }


    public function isFromCurrentHospital($id, $hopital)
    {
        //dump($id, $hopital);exit;

        $qb = $this->getEntityManager()->createQueryBuilder();
        return $qb->select('COUNT(m)')
            ->from('GestionBundle:Medecin', 'm')
            ->where("m.hopital = :hopital")
            ->where("m.id = :medecin")
            /*->andWhere($qb->expr()->not($qb->expr()->exists('
                SELECT i  FROM GestionBundle:Infirmier i
                WHERE m.id  = i.id
            ')))*/
            ->setParameter('hopital', $hopital->getId())
            ->setParameter('medecin', $id);

        return $qb->getSingleScalarResult();
    }

    public function foo()
    {
        echo $this->createQueryBuilder('m')
            
            ->leftJoin('m.specialites', 's')
            //->from('GestionBundle:Medecin', 'm')
            //->join('m.specialites', )
            ->getQuery()->getSQL();
    }


    public function findBySpecialite($specialite, $user = null)
    {
        $qb = $this->createQueryBuilder("m")
        ->where(':specialite MEMBER OF m.specialites');
        
        $params['specialite'] = $specialite;

        if ($user && $user->getHopital()) {
            //dump($user);
            $qb->join('m.personne', 'p', 'WITH', 'p.id = m.personne');
            $qb->join('UtilisateurBundle:Utilisateur', 'u', 'WITH', 'u.personne = p.id');
            $qb->join('UtilisateurBundle:UtilisateurHopital', 'h', 'WITH', 'h.utilisateur = u.id');

            $qb->andWhere('h.hopital = :hopital');
            $params['hopital'] = $user->getHopital();
        }


        $qb->setParameters($params);
        return $qb->getQuery()->getResult();
    }


    public function findByMedecinByPersonne($user, $result = false)
    {
        $hopital = $user->getHopital();
        
        $qb = $this->getEntityManager()->createQueryBuilder();
        $stmt = $qb->select('m')
            ->from('GestionBundle:Medecin', 'm')
            ->where("m.hopital = :id")
            /*->andWhere($qb->expr()->not($qb->expr()->exists('
                SELECT i  FROM GestionBundle:Infirmier i
                WHERE m.id  = i.id
            ')))*/
            ->setParameter('id', $hopital->getId());

        if ($result) {
            return $stmt->getQuery()->getResult();
        }
        return $stmt;
    }
}
