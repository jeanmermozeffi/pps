<?php

namespace PS\GestionBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\NoResultException;

/**
 * LigneAnalyseRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PharmacieRepository extends EntityRepository
{
    /**
     * On teste si le couple PIN + ID existe
     * @param  int $pin
     * @param  int $identifiant
     * @return int
     */
    public function exists($pharmacie)
    {
        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery('SELECT a.id FROM GestionBundle:Pharmacie a WHERE a.id = ?1 OR a.libPharmacie = ?2')
            ->setParameter(1, $pharmacie)
            ->setParameter(2, $pharmacie);

        try {
            $result = $qb->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = null;
        }

        return $result;
    }


    /**
     * @param $result
     * @return mixed
    */
    public function points($result = true)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
       
       
        $qb->select('a.libPharmacie, b.nomResponsable, b.localisationPharmacie, b.contacts')
            ->from('GestionBundle:Pharmacie', 'a')
            ->join('a.info', 'b')
            
            ->andWhere('b.pointVente = 1');
        

        return $result ? $qb->getQuery()->getResult() : $qb;
    }

    /**
     * @param $result
     * @return mixed
     */
    public function gardes($result = true, $ignoreDate = true)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb->select('d.id, a.libPharmacie, b.nomResponsable, b.localisationPharmacie, b.contacts')
            ->from('GestionBundle:Pharmacie', 'a')
            ->join('a.info', 'b')
            ->join('GestionBundle:GardePharmacie', 'd', 'WITH', 'd.pharmacie = a.id')
            ->andWhere('CURRENT_DATE BETWEEN d.dateDebut AND d.dateFin');
        

        return $result ? $qb->getQuery()->getResult() : $qb;

    }

    /**
     * @param $medicaments
     * @param $pharmacie
     * @param null $result
     */
    public function searchMedicament($medicaments, $pharmacie = null, $result = true)
    {
        $medicaments = array_map('trim', explode(',', $medicaments));
        $qb          = $this->getEntityManager()->createQueryBuilder();
        $qb->select('a.libPharmacie, b.nomResponsable, d.prixMedicament, d.disponible, b.localisationPharmacie, b.contacts')
            ->from('GestionBundle:Pharmacie', 'a')
            ->join('a.info', 'b')
            ->join('GestionBundle:DisponibiliteMedicament', 'd', 'WITH', 'd.pharmacie = a.id')
            ->join('ParametreBundle:Medicament', 'm', 'WITH', 'm.id = d.medicament')
            ->where('d.disponible = 1');

        $parameters = [];
        foreach ($medicaments as $index => $medicament) {
            $key = $index + 1;
            $qb->andWhere("m.nom LIKE ?{$key}");
            $parameters[$key] = "%{$medicament}%";
        }

        if ($pharmacie) {
            $key += 1;
            $qb->andWhere('a.id = ?{$key}');
            $parameters[$key] = $pharmacie;
        }



        $qb->setParameters($parameters);

        //dump($result, $parameters, $qb);exit;

        return $result ? $qb->getQuery()->getResult() : $qb;

    }

    /**
     * @param $pharmacie
     * @param $commune
     * @param $ville
     * @return mixed
     */
    public function existsByCommune($pharmacie, $commune, $ville = null)
    {
        if (is_object($commune)) {
            $commune = $commune->getId();
        }

        if (is_object($ville)) {
            $ville = $ville->getid();
        }

        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery('SELECT a.id FROM
                GestionBundle:Pharmacie a
                JOIN GestionBundle:InfoPharmacie i
                WHERE a.libPharmacie = ?1 AND i.commune = ?2')
            ->setParameter(1, $pharmacie)
            ->setParameter(2, $commune);

        try {
            $result = $qb->getSingleScalarResult();
        } catch (NoResultException $e) {
            $result = null;
        }

        return $result;
    }

}
