<?php

namespace PS\GestionBundle\Repository;

/**
 * ConsultationConstanteRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsultationConstanteRepository extends \Doctrine\ORM\EntityRepository
{

    public function minYear($constante, $patient)
    {
        $query = $this->getEntityManager()->createQuery('SELECT MIN(YEAR(cs.dateConsultation)) FROM GestionBundle:ConsultationConstante c JOIN GestionBundle:Consultation cs WHERE c.constante = :constante AND cs.patient = :patient');

        $query->setParameters(compact('constante', 'patient'));

        $annee = intval($query->getSingleScalarResult());


        
        return $annee ?: date('Y');
    }
    /**
     * @param $mesure
     * @param $patient
     * @param $annee
     * @return mixed
     */
    public function data($constante, $patient, $annee)
    {
        $and_where_str = '';
        $em            = $this->getEntityManager()->getConnection();
        $sql           = <<<SQL
SELECT YEAR(date_consultation), MONTH(date_consultation) AS mois, AVG(valeur) AS val_moy, diagnostique
FROM consultation_constante c
JOIN consultation c1 ON c1.id = c.consultation_id

WHERE c1.patient_id = :patient_id
AND constante_id = :constante_id
%s
GROUP BY YEAR(date_consultation), MONTH(date_consultation), diagnostique
SQL
        ;

        $params = ['patient_id' => $patient->getId(), 'constante_id' => $constante->getId() /*, 'annee' => $annee*/];

        if ($annee) {
            $sql             = sprintf($sql, ' AND YEAR(date_consultation) = :annee');
            $params['annee'] = $annee;
        } else {
            $sql = sprintf($sql, ' AND 1=1 ');
        }

        $stmt = $em->prepare($sql);
        $stmt->execute($params);

        return $stmt->fetchAll(\PDO::FETCH_GROUP);
        /*$qb = $this->getEntityManager()->createQueryBuilder();
    $qb->select('AVG(s.valeur), MONTH(s.dateDebut)')
    ->from(Suivi::class, 's')
    ->where("s.patient = :patient")
    ->andWhere('s.mesure = :mesure')
    ->andWhere('YEAR(s.dateDebut) = :annee')
    ->groupBy('MONTH(s.dateDebut)')
    ->setParameter('patient', $patient)
    ->setParameter('mesure', $mesure)
    ->setParameter('annee', $annee);

    return $qb->getQuery()->getResult();*/
    }
}
