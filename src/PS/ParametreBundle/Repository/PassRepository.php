<?php

namespace PS\ParametreBundle\Repository;

use Doctrine\ORM\EntityRepository;

/**
 * PassRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PassRepository extends EntityRepository
{
    /**
     * @param $nom
     * @return mixed
     */
    public function findSearch($nom)
    {
        $qb = $this->getEntityManager()->createQueryBuilder('a');

        $qb
            ->where("a.identifiant LIKE :nom")
            ->orderBy('a.identifiant', 'ASC')
            ->setParameter('nom', '%' . $nom . '%');

        return $qb->getQuery()->getResult();

    }

    /**
     * @param $identifiant
     * @return mixed
     */
    public function isIdExists($identifiant)
    {
        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery(<<<SQL
SELECT COUNT(a.id)
FROM ParametreBundle:Pass a
WHERE a.identifiant = ?1

SQL
            )
            ->setParameter(1,$identifiant);
        //->setParameter(2,$identifiant);

        $count = $qb->getSingleScalarResult();
        return $count;
    }

    public function generateIdPin($len = 4, $type = 'alphabet')
    {
        $pin         = $this->generate($len, $type);
        $identifiant = $this->generate($len, $type);

        if (!$this->isIdExists($identifiant)) {
            return [$identifiant, $pin];
        }

        return [];
    }

    /**
     * @param $limit
     * @return mixed
     */
    public function active($limit)
    {
        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery(<<<SQL
SELECT a
FROM ParametreBundle:Pass a
LEFT JOIN GestionBundle:Patient p
WITH a.pin = p.pin AND a.identifiant = p.identifiant
WHERE p.id IS NULL
SQL
            )
            ->setMaxResults($limit);

        return $qb->getResult();
    }

   /**
     * @param $len
     * @return mixed
     */
    public function generate($len = 4, $type = 'alphabet')
    {
        $alphabet = '0123456789';
        $alphanum = $alphabet . implode('', range('a', 'z'));

        $data = $type == 'alphabet' ? $alphabet : $alphanum;

        if ($len < 1) {
            throw new \InvalidArgumentException('Length must be a positive integer');
        }

        $str      = '';
        $alphamax = strlen($data) - 1;
        if ($alphamax < 1) {
            throw new \InvalidArgumentException('Invalid alphabet');
        }

        for ($i = 0; $i < $len; ++$i) {
            $str .= $data[random_int(0, $alphamax)];
        }

        return $str;
    }


    /**
     * @param $first
     * @param $last
     * @return mixed
     */
    public function findByDate($first, $last = null, $corporate = null)
    {
        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery(<<<SQL
SELECT a.identifiant, a.pin
FROM ParametreBundle:Pass a
LEFT JOIN GestionBundle:Patient p
WITH a.pin = p.pin AND a.identifiant = p.identifiant
WHERE p.id IS NOT NULL
AND DATE(a.dateCreation) BETWEEN :a AND :b

SQL
            )
            ->setParameter('a',$first->format('Y-m-d'))
            ->setParameter('b',$last->format('Y-m-d'));

        return $qb->getResult();
    }


    public function corporateByIdPin($identifiant, $pin)
    {
        $em  = $this->getEntityManager();
        $sql = <<<SQL
SELECT IDENTITY(c.corporate)
FROM ParametreBundle:Pass a
JOIN GestionBundle:PassCorporate c
WITH a.id = c.pass
WHERE a.pin = :pin AND a.identifiant = :identifiant

SQL;
        //dump($corporate);exit;
        $parameters = compact('identifiant', 'pin');

       
        try {
            $qb = $em
            ->createQuery($sql)
            ->setParameters($parameters);

       
            $result = $qb->getSingleScalarResult();
        } catch (\Doctrine\ORM\NoResultException $e) {
            $result = false;
        }
        
        return $result;

        //->setParameter(3,$idPatient);
    }

    
    /**
     * On teste si le couple PIN + ID existe
     * @param  int $pin
     * @param  int $identifiant
     * @return int
     */
    public function exists($identifiant, $pin, $idPatient)
    {
        $em = $this->getEntityManager();
        $qb = $em
            ->createQuery(<<<SQL
SELECT COUNT(a.id)
FROM ParametreBundle:Pass a
LEFT JOIN GestionBundle:Patient p
WITH a.pin = p.pin AND a.identifiant = p.identifiant
WHERE a.pin = ?1 AND a.identifiant = ?2
AND (p.id IS NULL OR p.id = ?3)
SQL
            )
            ->setParameter(1,$pin)
            ->setParameter(2,$identifiant)

            ->setParameter(3,$idPatient);

        return $qb->getSingleScalarResult();
    }

}
